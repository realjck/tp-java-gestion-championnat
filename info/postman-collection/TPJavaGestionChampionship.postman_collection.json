{
	"info": {
		"_postman_id": "07638758-13b9-4d79-be69-a479d7c7b307",
		"name": "TPJavaGestionChampionship",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34195992"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "saveUser(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Response has the required fields - id, firstName, lastName, email, password, and creationDate', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.firstName).to.exist;",
									"    pm.expect(responseData.lastName).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.password).to.exist;",
									"    pm.expect(responseData.creationDate).to.exist;",
									"})",
									"",
									"pm.test('Email is in a valid format', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, 'Email is not in valid format');",
									"})",
									"",
									"pm.test('Password should not be empty', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.password).to.exist.and.to.not.be.empty;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\" : \"John\",\n    \"lastName\" : \"Doe\",\n    \"email\" : \"johndoe@gmail.com\",\n    \"password\" : \"password1243\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/user/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, firstName, lastName, email, password, and creationDate fields should exist\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.firstName).to.exist;",
									"    pm.expect(responseData.lastName).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.password).to.exist;",
									"    pm.expect(responseData.creationDate).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.password).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\" : \"Jane\",\n    \"lastName\" : \"Doe\",\n    \"email\" : \"janedoe@gmail.com\",\n    \"password\" : \"password1243\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/user/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"user",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllUsers()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('firstName');",
									"        pm.expect(user).to.have.property('lastName');",
									"        pm.expect(user).to.have.property('email');",
									"        pm.expect(user).to.have.property('password');",
									"        pm.expect(user).to.have.property('creationDate');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.password).to.exist.and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Creation date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/user/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserById()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, firstName, lastName, email, password, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.firstName).to.exist;",
									"    pm.expect(responseData.lastName).to.exist;",
									"    pm.expect(responseData.email).to.exist;",
									"    pm.expect(responseData.password).to.exist;",
									"    pm.expect(responseData.creationDate).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/^.+@.+\\..+$/);",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.password).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Creation date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/user/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"user",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserByEmailAndPassword()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('firstName');",
									"    pm.expect(responseData).to.have.property('lastName');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('password');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.be.a('string');",
									"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Password should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.password).to.exist.and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Creation date is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/user/getUserByEmailAndPassword?email=janedoe@gmail.com&password=password1243",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"user",
								"getUserByEmailAndPassword"
							],
							"query": [
								{
									"key": "email",
									"value": "janedoe@gmail.com"
								},
								{
									"key": "password",
									"value": "password1243"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "championship",
			"item": [
				{
					"name": "saveChampionship(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('startDate');",
									"    pm.expect(responseData).to.have.property('endDate');",
									"    pm.expect(responseData).to.have.property('wonPoint');",
									"    pm.expect(responseData).to.have.property('lostPoint');",
									"    pm.expect(responseData).to.have.property('drawPoint');",
									"})",
									"",
									"pm.test('End date is after the start date', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.startDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.endDate).to.exist.and.to.be.a('string');",
									"    pm.expect(new Date(responseData.endDate)).to.be.above(new Date(responseData.startDate));",
									"})",
									"",
									"pm.test('WonPoint, LostPoint, and DrawPoint are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.wonPoint).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.lostPoint).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.drawPoint).to.be.a('number').and.to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Ligue des champions\",\n    \"startDate\": \"2024-05-01T00:00:00Z\",\n    \"endDate\": \"2024-06-01T00:00:00Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/championship/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"championship",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveChampionship(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('startDate');",
									"    pm.expect(responseData).to.have.property('endDate');",
									"    pm.expect(responseData).to.have.property('wonPoint');",
									"    pm.expect(responseData).to.have.property('lostPoint');",
									"    pm.expect(responseData).to.have.property('drawPoint');",
									"})",
									"",
									"pm.test('End date is after the start date', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.startDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.endDate).to.exist.and.to.be.a('string');",
									"    pm.expect(new Date(responseData.endDate)).to.be.above(new Date(responseData.startDate));",
									"})",
									"",
									"pm.test('WonPoint, LostPoint, and DrawPoint are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.wonPoint).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.lostPoint).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.drawPoint).to.be.a('number').and.to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Ligue des champignons\",\n    \"startDate\": \"2024-05-01T00:00:00Z\",\n    \"endDate\": \"2024-06-01T00:00:00Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/championship/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"championship",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllChampionships()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (championship) {",
									"        pm.expect(championship).to.have.property('id');",
									"        pm.expect(championship).to.have.property('name');",
									"        pm.expect(championship).to.have.property('startDate');",
									"        pm.expect(championship).to.have.property('endDate');",
									"        pm.expect(championship).to.have.property('wonPoint');",
									"        pm.expect(championship).to.have.property('lostPoint');",
									"        pm.expect(championship).to.have.property('drawPoint');",
									"    });",
									"})",
									"",
									"pm.test('Verify that the response is in JSON format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, wonPoint, and lostPoint are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (championship) {",
									"        pm.expect(championship.id).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(championship.wonPoint).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(championship.lostPoint).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/championship/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"championship",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateChampionship(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('startDate');",
									"    pm.expect(responseData).to.have.property('endDate');",
									"    pm.expect(responseData).to.have.property('wonPoint');",
									"    pm.expect(responseData).to.have.property('lostPoint');",
									"    pm.expect(responseData).to.have.property('drawPoint');",
									"})",
									"",
									"pm.test('End date is after the start date', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.startDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.endDate).to.exist.and.to.be.a('string');",
									"    pm.expect(new Date(responseData.endDate)).to.be.above(new Date(responseData.startDate));",
									"})",
									"",
									"pm.test('WonPoint, LostPoint, and DrawPoint are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.wonPoint).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.lostPoint).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.drawPoint).to.be.a('number').and.to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"wonPoint\" : 5,\n    \"lostPoint\": 1,\n    \"drawPoint\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/championship/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"championship",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getChampionshipById()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('startDate');",
									"    pm.expect(responseData).to.have.property('endDate');",
									"    pm.expect(responseData).to.have.property('wonPoint');",
									"    pm.expect(responseData).to.have.property('lostPoint');",
									"    pm.expect(responseData).to.have.property('drawPoint');",
									"})",
									"",
									"pm.test('Verify that the response is in JSON format', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/championship/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"championship",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteChampionship(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/championship/{{val2}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"championship",
								"{{val2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "team",
			"item": [
				{
					"name": "saveTeam(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Olympique Monaco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveTeam(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Manchester United\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveTeam(3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Bilbao Knights\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveTeam(4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"SF Tigers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllTeams()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(team){",
									"        pm.expect(team).to.have.property('id');",
									"        pm.expect(team).to.have.property('name');",
									"        pm.expect(team).to.have.property('creationDate');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(team){",
									"        pm.expect(team.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/team/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getTeamById()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('name');",
									"  pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/team/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addTeamToChampionship(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Olympique Monaco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/add-to-championship/{{val1}}/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"add-to-championship",
								"{{val1}}",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addTeamToChampionship(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Olympique Monaco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/add-to-championship/{{val2}}/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"add-to-championship",
								"{{val2}}",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addTeamToChampionship(3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Olympique Monaco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/add-to-championship/{{val3}}/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"add-to-championship",
								"{{val3}}",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addTeamToChampionship(4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Olympique Monaco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/add-to-championship/{{val4}}/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"add-to-championship",
								"{{val4}}",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateTeam()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, and creationDate\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('creationDate');",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreationDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Olympique Marseille\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/team/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllTeamsByChampionshipId()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify the response array is of the expected length\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf(4);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/team/championship/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"championship",
								"{{val1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "day",
			"item": [
				{
					"name": "saveDay(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, number, and championship fields are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.number).to.exist;",
									"    pm.expect(responseData.championship).to.exist;",
									"})",
									"",
									"pm.test('WonPoint, LostPoint, and DrawPoint are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.championship.wonPoint).to.be.a('number').and.to.satisfy(val => val >= 0, 'Value should be a non-negative integer');",
									"    pm.expect(responseData.championship.lostPoint).to.be.a('number').and.to.satisfy(val => val >= 0, 'Value should be a non-negative integer');",
									"    pm.expect(responseData.championship.drawPoint).to.be.a('number').and.to.satisfy(val => val >= 0, 'Value should be a non-negative integer');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"Demi-finale\",\n    \"championship\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/day/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveDay(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, number, and championship fields are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.number).to.exist;",
									"    pm.expect(responseData.championship).to.exist;",
									"})",
									"",
									"pm.test('WonPoint, LostPoint, and DrawPoint are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.championship.wonPoint).to.be.a('number').and.to.satisfy(val => val >= 0, 'Value should be a non-negative integer');",
									"    pm.expect(responseData.championship.lostPoint).to.be.a('number').and.to.satisfy(val => val >= 0, 'Value should be a non-negative integer');",
									"    pm.expect(responseData.championship.drawPoint).to.be.a('number').and.to.satisfy(val => val >= 0, 'Value should be a non-negative integer');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"Finale\",\n    \"championship\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/day/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllDays()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Validate the array structure and its elements', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.id).to.exist.and.to.be.a('number');",
									"        pm.expect(item.number).to.exist.and.to.be.a('string');",
									"        pm.expect(item.championship).to.be.an('object');",
									"        pm.expect(item.championship.id).to.exist.and.to.be.a('number');",
									"        pm.expect(item.championship.name).to.exist.and.to.be.a('string');",
									"        pm.expect(item.championship.startDate).to.exist.and.to.be.a('string');",
									"        pm.expect(item.championship.endDate).to.exist.and.to.be.a('string');",
									"        pm.expect(item.championship.wonPoint).to.exist.and.to.be.a('number');",
									"        pm.expect(item.championship.lostPoint).to.exist.and.to.be.a('number');",
									"        pm.expect(item.championship.drawPoint).to.exist.and.to.be.a('number');",
									"    });",
									"})",
									"",
									"pm.test('Validate the championship object', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('championship').that.is.an('object');",
									"        pm.expect(item.championship).to.have.property('id').that.is.a('number');",
									"        pm.expect(item.championship).to.have.property('name').that.is.a('string');",
									"        pm.expect(item.championship).to.have.property('startDate').that.is.a('string');",
									"        pm.expect(item.championship).to.have.property('endDate').that.is.a('string');",
									"        pm.expect(item.championship).to.have.property('wonPoint').that.is.a('number');",
									"        pm.expect(item.championship).to.have.property('lostPoint').that.is.a('number');",
									"        pm.expect(item.championship).to.have.property('drawPoint').that.is.a('number');",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/day/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getDayById(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id and number fields should exist and be of valid type', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.number).to.exist.and.to.be.a('string');",
									"})",
									"",
									"pm.test('Championship object and its properties are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.championship).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.championship.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.championship.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.championship.startDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.championship.endDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.championship.wonPoint).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.championship.lostPoint).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.championship.drawPoint).to.exist.and.to.be.a('number');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/day/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDay(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Id is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"})",
									"",
									"pm.test('Number is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.number).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Number should be a non-empty string');",
									"})",
									"",
									"pm.test('Championship has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.championship).to.be.an('object');",
									"    pm.expect(responseData.championship).to.have.property('id');",
									"    pm.expect(responseData.championship).to.have.property('name');",
									"    pm.expect(responseData.championship).to.have.property('startDate');",
									"    pm.expect(responseData.championship).to.have.property('endDate');",
									"    pm.expect(responseData.championship).to.have.property('wonPoint');",
									"    pm.expect(responseData.championship).to.have.property('lostPoint');",
									"    pm.expect(responseData.championship).to.have.property('drawPoint');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"number\": \"Finale des champions\",\r\n    \"championship\": {\r\n        \"id\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/day/{{val2}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								"{{val2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getDayById(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id and number fields should exist and be of valid type', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.number).to.exist.and.to.be.a('string');",
									"})",
									"",
									"pm.test('Championship object and its properties are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.championship).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.championship.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.championship.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.championship.startDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.championship.endDate).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.championship.wonPoint).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.championship.lostPoint).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.championship.drawPoint).to.exist.and.to.be.a('number');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/day/{{val2}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								"{{val2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllDaysByChampionshipId()",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response content type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id and number fields must exist in the response', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.id).to.exist.and.to.be.a('number');",
									"        pm.expect(item.number).to.exist.and.to.be.a('string');",
									"    });",
									"})",
									"",
									"pm.test('Championship object structure and fields verification', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id').that.is.a('number');",
									"        pm.expect(item).to.have.property('number').that.is.a('string');",
									"        pm.expect(item).to.have.property('championship').that.is.an('object');",
									"        pm.expect(item.championship).to.have.property('id').that.is.a('number');",
									"        pm.expect(item.championship).to.have.property('name').that.is.a('string');",
									"        pm.expect(item.championship).to.have.property('startDate').that.is.a('string');",
									"        pm.expect(item.championship).to.have.property('endDate').that.is.a('string');",
									"        pm.expect(item.championship).to.have.property('wonPoint').that.is.a('number');",
									"        pm.expect(item.championship).to.have.property('lostPoint').that.is.a('number');",
									"        pm.expect(item.championship).to.have.property('drawPoint').that.is.a('number');",
									"    });",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/day/championship/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								"championship",
								"{{val1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "game",
			"item": [
				{
					"name": "saveGame(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, number, and championship fields are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.team1Point).to.exist;",
									"    pm.expect(responseData.team2Point).to.exist;",
									"    pm.expect(responseData.team1).to.exist;",
									"    pm.expect(responseData.team2).to.exist;",
									"    pm.expect(responseData.day).to.exist;",
									"    ",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"team1Point\": 3,\n    \"team2Point\": 1,\n    \"team1\": {\n        \"id\":1\n    },\n    \"team2\": {\n        \"id\":2\n    },\n    \"day\" : {\n        \"id\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/game/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveGame(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, number, and championship fields are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.team1Point).to.exist;",
									"    pm.expect(responseData.team2Point).to.exist;",
									"    pm.expect(responseData.team1).to.exist;",
									"    pm.expect(responseData.team2).to.exist;",
									"    pm.expect(responseData.day).to.exist;",
									"    ",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"team1Point\": 0,\n    \"team2Point\": 2,\n    \"team1\": {\n        \"id\":3\n    },\n    \"team2\": {\n        \"id\":4\n    },\n    \"day\" : {\n        \"id\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/game/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "saveGame(3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 201', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, number, and championship fields are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.team1Point).to.exist;",
									"    pm.expect(responseData.team2Point).to.exist;",
									"    pm.expect(responseData.team1).to.exist;",
									"    pm.expect(responseData.team2).to.exist;",
									"    pm.expect(responseData.day).to.exist;",
									"    ",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"team1Point\": 1,\n    \"team2Point\": 0,\n    \"team1\": {\n        \"id\":1\n    },\n    \"team2\": {\n        \"id\":4\n    },\n    \"day\" : {\n        \"id\":2\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/game/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "updateGame(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Id, number, and championship fields are present', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.team1Point).to.exist;",
									"    pm.expect(responseData.team2Point).to.exist;",
									"    pm.expect(responseData.team1).to.exist;",
									"    pm.expect(responseData.team2).to.exist;",
									"    pm.expect(responseData.day).to.exist;",
									"    ",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"team1Point\": 3,\n    \"team2Point\": 5,\n    \"team1\": {\n        \"id\":1\n    },\n    \"team2\": {\n        \"id\":2\n    },\n    \"day\" : {\n        \"id\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8090/api/game/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllGames()",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllGamesByChampionshipId()",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/championship/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"championship",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllGamesByDayId(1)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/day/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"day",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAllGamesByDayId(2)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/day/{{val2}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"day",
								"{{val2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getGameById(1)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"{{val1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "_Delete_operations",
			"item": [
				{
					"name": "deleteGame(1)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteGame(2)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/{{val2}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"{{val2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteGame(3)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/game/{{val3}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"game",
								"{{val3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteDay(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/day/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								"{{val1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteDay(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/day/{{val2}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"day",
								"{{val2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteTeam(4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.equal(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/team/{{val4}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"team",
								"{{val4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUser(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8090/api/user/{{val1}}",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"user",
								"{{val1}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "val1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "val2",
			"value": "2",
			"type": "string"
		},
		{
			"key": "val3",
			"value": "3",
			"type": "string"
		},
		{
			"key": "val4",
			"value": "4",
			"type": "string"
		},
		{
			"key": "user",
			"value": "janedoe@gmail.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "password1243",
			"type": "string"
		}
	]
}